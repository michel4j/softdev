#!/usr/bin/env  python

import os
import errno
import re
import argparse


def slugify(text):
    return re.sub(r'[^a-z0-9]+', '', str(text))


RUNIOC_TMPL = """#!/usr/bin/env python
import os
import logging
import sys
from twisted.internet import gireactor
gireactor.install()

from twisted.internet import reactor
from softdev import log
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from {project_name} import ioc

# Example of how to start your APP. Modify as needed

if __name__== '__main__':
    if '-v' in sys.argv:
        log.log_to_console(logging.DEBUG)
    else:
        log.log_to_console(logging.INFO)
    app = ioc.{app_name}('APP0000-01')  # initialize App
    reactor.run()               # run main-loop

"""

IOC_TMPL = """
from softdev import epics, models, log

# Create your models here. Modify the example below as appropriate

class {model_name}(models.Model):
    enum = models.Enum('enum', choices=['ZERO', 'ONE', 'TWO'], default=0, desc='Enum Test')
    toggle = models.Toggle('toggle', zname='ON', oname='OFF', desc='Toggle Test')
    sstring = models.String('sstring', max_length=20, desc='Short String Test')
    lstring = models.String('lstring', max_length=512, desc='Long String Test')
    intval = models.Integer('intval', max_val=1000, min_val=-1000, default=0, desc='Int Test')
    floatval = models.Float('floatval', max_val=MAX_INTEGER, min_val=MIN_INTEGER, default=0.0, desc='Float Test')
    floatout = models.Float('floatout', desc='Test Float Output')
    intarray = models.Array('intarray', type=int, length=16, desc='Int Array Test')
    floatarray = models.Array('floatarray', type=float, length=16, desc='Float Array Test')
    calc = models.Calc('calc', calc='A+B', inpa='$(device):intval CP NMS', inpb='$(device):floatval CP NMS', desc='Calc Test')


# create your app here. Modify the following example as appropriate

class {app_name}(object):
    def __init__(device_name):
        self.ioc = {model_name}(device_name, callbacks=self)
    
    def do_toggle(self, pv, value, ioc):
        print('Toggle Changed Value', pv, value, ioc)
        ioc.enum.put((ioc.enum.get() + 1) % 3, flush=True)  # cycle through values
    
    def do_enum(self, pv, value, ioc):
        print('New Enum Value', value)

"""


def startproject(name):
    name = slugify(name) #slugify the name
    project_dir = os.path.join(os.getcwd(), name)
    bin_dir = os.path.join(project_dir, 'bin')
    ioc_dir = os.path.join(project_dir, name)
    op_dir = os.path.join(project_dir, 'op')

    #create directories
    for path in [project_dir, bin_dir, ioc_dir, op_dir]:
        try:
            os.makedirs(path)
        except OSError as e:
            if e.errno == errno.EEXIST and os.path.isdir(path):
                pass
            else:
                raise

    #create files
    model_name = name.title()
    app_name = '{}App'.format(model_name)

    bin_file = os.path.join(bin_dir, 'runIOC.py')
    with open(bin_file, 'w') as handle:
        handle.write(RUNIOC_TMPL.format(project_name=name, app_name=app_name))

    # make file executable
    os.chmod(bin_file, 0755)

    ioc_file = os.path.join(ioc_dir, 'ioc.py')
    with open(ioc_file, 'w') as handle:
        handle.write(IOC_TMPL.format(project_name=name, model_name=model_name, app_name=app_name))

    print('Project `{}` created'.format(name))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Create A SoftDev Project.')
    parser.add_argument('name', metavar='name', type=str, nargs=1, help='the project name, single word')
    args = parser.parse_args()
    startproject(args.name)